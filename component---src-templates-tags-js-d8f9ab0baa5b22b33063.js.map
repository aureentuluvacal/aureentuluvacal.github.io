{"version":3,"file":"component---src-templates-tags-js-d8f9ab0baa5b22b33063.js","mappings":"0IAyDA,UApDa,SAAC,GAAqC,IAAnCA,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACzBC,EAAQF,EAARE,IACR,EAA8BH,EAAKI,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,gBAAC,IAAD,CAAQD,SAAUA,EAAUM,MAAM,aAChC,0BAAKD,GACJF,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACR,EAA4BD,EAAKG,YAAzBL,EAAR,EAAQA,MAAOM,EAAf,EAAeA,SACTC,EAAYD,EAAcN,EAAN,KAAgBM,EAAaN,EAEvD,OACE,2BAASQ,IAAKR,GACZ,gBAAC,EAAAS,KAAD,CAAMC,GAAIP,GACR,4BAAOI,QAKf,2BACA,gBAAC,EAAAE,KAAD,CAAMC,GAAG,SAAT","sources":["webpack://blog/./src/templates/tags.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport Layout from '../components/layout'\n\nconst Tags = ({ data, pageContext, location }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout location={location} title='Cal Perez'>\n      <h2>{tagHeader}</h2>\n      {edges.map(({ node }) => {\n        const { slug } = node.fields\n        const { title, subtitle } = node.frontmatter\n        const fullTitle = subtitle ? `${title}: ${subtitle}` : title\n\n        return (\n          <article key={title}>\n            <Link to={slug}>\n              <span>{fullTitle}</span>\n            </Link>\n          </article>\n        )\n      })}\n      <br/>\n      <Link to='/tags'>All tags</Link>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired\n            })\n          })\n        }).isRequired\n      )\n    })\n  })\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            subtitle\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["data","pageContext","location","tag","allMarkdownRemark","edges","totalCount","tagHeader","title","map","node","slug","fields","frontmatter","subtitle","fullTitle","key","Link","to"],"sourceRoot":""}