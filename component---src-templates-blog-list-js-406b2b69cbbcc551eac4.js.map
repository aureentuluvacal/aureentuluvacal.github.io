{"version":3,"file":"component---src-templates-blog-list-js-406b2b69cbbcc551eac4.js","mappings":"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","sources":["webpack://blog/./src/components/seo.js","webpack://blog/./src/components/tag.js","webpack://blog/./src/components/bio.js","webpack://blog/./src/templates/blog-list.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription\n        },\n        {\n          property: 'og:title',\n          content: title\n        },\n        {\n          property: 'og:description',\n          content: metaDescription\n        },\n        {\n          property: 'og:type',\n          content: 'website'\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: ''\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Tag = ({ name }) => {\n  const getTagColor = () => {\n    switch (name) {\n      case 'Code':\n        return '#FF50F1'\n      case 'Math':\n        return '#8C55E5'\n      case 'Personal':\n        return '#B64E5C'\n      case 'Science':\n        return '#7be21d'\n      default:\n        return '#0577CE'\n    }\n  }\n\n  const tagColor = getTagColor();\n\n  const styles = {\n    color: tagColor,\n    border: `2px solid ${tagColor}`,\n    borderRadius: '20px',\n    margin: '0 4px',\n    padding: '2px 8px',\n    fontWeight: 'bold'\n  }\n\n  return <Link to={`/tags/${name.toLowerCase()}`} style={styles}>{name}</Link>\n}\n\nexport default Tag\n","import React from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport { rhythm } from '../utils/typography';\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            summary\n          }\n        }\n      }\n    }\n  `);\n\n  const { author } = data.site.siteMetadata;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        fontSize: '14px',\n        marginTop: rhythm(0.5),\n      }}\n    >\n      <p\n        style={{\n          marginBottom: 0,\n          fontFamily: 'Montserrat, sans-serif',\n          fontStyle: 'italic',\n        }}\n      >\n        {author.summary}{' '}\n        <Link\n          style={{\n            boxShadow: 'none',\n            color: 'inherit',\n          }}\n          to=\"/resume\"\n        >\n          <strong>Here's my resume.</strong>\n        </Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Bio;\n","// Gatsby supports TypeScript natively!\nimport React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\nimport Tag from '../components/tag'\nimport { rhythm } from '../utils/typography'\n\nconst BlogIndex = ({ data, location, pageContext }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n  const nextPage = (currentPage + 1).toString()\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title='Blog' />\n      <Bio />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                <h3\n                  style={{\n                    marginBottom: 0\n                  }}\n                >\n                  {title}\n                </h3>\n                <h4\n                  style={{\n                    marginTop: rhythm(0.2),\n                    marginBottom: 0\n                  }}\n                >\n                  {node.frontmatter.subtitle}\n                </h4>\n              </Link>\n              <small>\n                {node.frontmatter.date} • {`${node.timeToRead} min read`}{' '}\n                {node.frontmatter.tags.map(tag => (\n                  <Tag key={tag} name={tag} />\n                ))}\n              </small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n      <div style={{ display: 'flex' }}>\n        <div style={{ width: '33%' }}>\n          {!isFirst && (\n            <Link to={`http://localhost:8000/${prevPage}`} rel='prev' style={{ justifyContent: 'flex-start' }}>\n              ← Previous Page\n            </Link>\n          )}\n        </div>\n\n        <div className='pageNumbers'>\n          {Array.from({ length: numPages }, (_, i) => (\n            <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? '' : i + 1}`}>\n              {i + 1}\n            </Link>\n          ))}\n        </div>\n        <div style={{ width: '33%', textAlign: 'right' }}>\n          {!isLast && (\n            <Link to={`http://localhost:8000/${nextPage}`} rel='next' style={{ justifyContent: 'flex-end' }}>\n              Next Page →\n            </Link>\n          )}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            subtitle\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["SEO","_ref","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","React","Helmet","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","tagColor","getTagColor","styles","color","border","borderRadius","margin","padding","fontWeight","Link","to","toLowerCase","style","Bio","data","author","display","fontSize","marginTop","rhythm","marginBottom","fontFamily","fontStyle","summary","boxShadow","location","pageContext","siteTitle","posts","allMarkdownRemark","edges","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","Layout","Seo","map","_ref2","node","frontmatter","fields","slug","key","subtitle","date","timeToRead","tags","tag","Tag","dangerouslySetInnerHTML","__html","excerpt","width","rel","justifyContent","className","Array","from","length","_","i","textAlign"],"sourceRoot":""}