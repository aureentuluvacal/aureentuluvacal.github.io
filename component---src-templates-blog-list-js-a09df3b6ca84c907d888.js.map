{"version":3,"file":"component---src-templates-blog-list-js-a09df3b6ca84c907d888.js","mappings":"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","sources":["webpack://blog/./src/components/seo.js","webpack://blog/./src/components/tag.js","webpack://blog/./src/components/bio.js","webpack://blog/./src/templates/blog-list.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription\n        },\n        {\n          property: 'og:title',\n          content: title\n        },\n        {\n          property: 'og:description',\n          content: metaDescription\n        },\n        {\n          property: 'og:type',\n          content: 'website'\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: ''\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Tag = ({ name }) => {\n  const getTagColor = () => {\n    switch (name) {\n      case 'Code':\n        return '#FF50F1'\n      case 'Math':\n        return '#8C55E5'\n      case 'Personal':\n        return '#B64E5C'\n      case 'Science':\n        return '#7be21d'\n      default:\n        return '#0577CE'\n    }\n  }\n\n  const tagColor = getTagColor();\n\n  const styles = {\n    color: tagColor,\n    border: `2px solid ${tagColor}`,\n    borderRadius: '20px',\n    margin: '0 4px',\n    padding: '2px 8px',\n    fontWeight: 'bold'\n  }\n\n  return <Link to={`/tags/${name.toLowerCase()}`} style={styles}>{name}</Link>\n}\n\nexport default Tag\n","import React from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport { rhythm } from '../utils/typography';\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            summary\n          }\n        }\n      }\n    }\n  `);\n\n  const { author } = data.site.siteMetadata;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        fontSize: '14px',\n        marginTop: rhythm(0.5),\n      }}\n    >\n      <p\n        style={{\n          marginBottom: 0,\n          fontFamily: 'Montserrat, sans-serif',\n          fontStyle: 'italic',\n        }}\n      >\n        {author.summary}{' '}\n        <Link\n          style={{\n            boxShadow: 'none',\n            color: 'inherit',\n          }}\n          to=\"/resume\"\n        >\n          <strong>Here's my resume.</strong>\n        </Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Bio;\n","// Gatsby supports TypeScript natively!\nimport React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\nimport Tag from '../components/tag'\nimport { rhythm } from '../utils/typography'\n\nconst BlogIndex = ({ data, location, pageContext }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n  const nextPage = (currentPage + 1).toString()\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title='Blog' />\n      <Bio />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                <h3\n                  style={{\n                    marginBottom: 0\n                  }}\n                >\n                  {title}\n                </h3>\n                <h4\n                  style={{\n                    marginTop: rhythm(0.2),\n                    marginBottom: 0\n                  }}\n                >\n                  {node.frontmatter.subtitle}\n                </h4>\n              </Link>\n              <small>\n                {node.frontmatter.date} • {`${node.timeToRead} min read`}{' '}\n                {node.frontmatter.tags.map(tag => (\n                  <Tag key={tag} name={tag} />\n                ))}\n              </small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n      <div style={{ display: 'flex' }}>\n        <div style={{ width: '33%' }}>\n          {!isFirst && (\n            <Link to={`http://localhost:8000/${prevPage}`} rel='prev' style={{ justifyContent: 'flex-start' }}>\n              ← Previous Page\n            </Link>\n          )}\n        </div>\n\n        <div className='pageNumbers'>\n          {Array.from({ length: numPages }, (_, i) => (\n            <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? '' : i + 1}`}>\n              {i + 1}\n            </Link>\n          ))}\n        </div>\n        <div style={{ width: '33%', textAlign: 'right' }}>\n          {!isLast && (\n            <Link to={`http://localhost:8000/${nextPage}`} rel='next' style={{ justifyContent: 'flex-end' }}>\n              Next Page →\n            </Link>\n          )}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            subtitle\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","tagColor","getTagColor","styles","color","border","borderRadius","margin","padding","fontWeight","Link","to","toLowerCase","style","author","display","fontSize","marginTop","rhythm","marginBottom","fontFamily","fontStyle","summary","boxShadow","data","location","pageContext","siteTitle","posts","allMarkdownRemark","edges","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","map","node","frontmatter","fields","slug","key","subtitle","date","timeToRead","tags","tag","dangerouslySetInnerHTML","__html","excerpt","width","rel","justifyContent","className","Array","from","length","_","i","textAlign"],"sourceRoot":""}