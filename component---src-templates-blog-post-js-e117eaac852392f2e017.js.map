{"version":3,"file":"component---src-templates-blog-post-js-e117eaac852392f2e017.js","mappings":"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","sources":["webpack://blog/./src/components/seo.js","webpack://blog/./src/components/tag.js","webpack://blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription\n        },\n        {\n          property: 'og:title',\n          content: title\n        },\n        {\n          property: 'og:description',\n          content: metaDescription\n        },\n        {\n          property: 'og:type',\n          content: 'website'\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: ''\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Tag = ({ name }) => {\n  const getTagColor = () => {\n    switch (name) {\n      case 'Code':\n        return '#FF50F1'\n      case 'Math':\n        return '#8C55E5'\n      case 'Personal':\n        return '#B64E5C'\n      case 'Science':\n        return '#7be21d'\n      default:\n        return '#0577CE'\n    }\n  }\n\n  const tagColor = getTagColor();\n\n  const styles = {\n    color: tagColor,\n    border: `2px solid ${tagColor}`,\n    borderRadius: '20px',\n    margin: '0 4px',\n    padding: '2px 8px',\n    fontWeight: 'bold'\n  }\n\n  return <Link to={`/tags/${name.toLowerCase()}`} style={styles}>{name}</Link>\n}\n\nexport default Tag\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\nimport Tag from '../components/tag'\nimport { rhythm, scale } from '../utils/typography'\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const { previous, next } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article>\n        <header>\n          <h1\n            style={{\n              marginTop: rhythm(1),\n              marginBottom: 0\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          {post.frontmatter.subtitle && (\n            <h2\n              style={{\n                marginTop: rhythm(0.5),\n                marginBottom: 0\n              }}\n            >\n              {post.frontmatter.subtitle}\n            </h2>\n          )}\n          <p\n            style={{\n              ...scale(-1 / 10),\n              display: 'block',\n              marginTop: rhythm(0.2),\n              marginBottom: rhythm(1)\n            }}\n          >\n            {post.frontmatter.date} • {`${post.timeToRead} min read`} {post.frontmatter.tags.map(tag => <Tag key={tag} name={tag} />)}\n          </p>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1)\n          }}\n        />\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'no-wrap',\n            justifyContent: 'space-between',\n            listStyle: 'none',\n            padding: 0,\n            fontSize: '16px'\n          }}\n        >\n          <li style={{ width: '340px' }}>\n            {previous && (\n              <Link to={previous.fields.slug} rel='prev' style={{ width: '340px' }}>\n                ← {previous.frontmatter.title}\n                {previous.frontmatter.subtitle && `: ${previous.frontmatter.subtitle}`}\n              </Link>\n            )}\n          </li>\n          <li style={{ minWidth: '340px', textAlign: 'right' }}>\n            {next && (\n              <Link to={next.fields.slug} rel='next'>\n                {next.frontmatter.title} →\n                <br />\n                {next.frontmatter.subtitle}\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      timeToRead\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        subtitle\n        tags\n      }\n    }\n  }\n`\n"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","tagColor","getTagColor","styles","color","border","borderRadius","margin","padding","fontWeight","Link","to","toLowerCase","style","data","pageContext","location","post","markdownRemark","siteTitle","previous","next","frontmatter","excerpt","marginTop","rhythm","marginBottom","subtitle","scale","display","date","timeToRead","tags","map","tag","key","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","fontSize","width","fields","slug","rel","minWidth","textAlign"],"sourceRoot":""}