{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/graphql-fun/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Cal Perez"}},"markdownRemark":{"id":"cd5d7c37-4f9c-5e51-8263-16157a1ce820","excerpt":"I’m having a great time building out the support app for Iris. I talked about deploying it on AWS in this post and now we’re gonna talk about the backend. The…","timeToRead":3,"html":"<p>I’m having a great time building out the support app for Iris. I talked about deploying it on AWS in <a href=\"https://caryssaperez.com/aws-docker-node-fun\">this post</a> and now we’re gonna talk about the backend. The stack for the support app is a React app that communicates with a Node backend requesting data from a GraphQL server. All of it is written in Typescript.</p>\n<p>The Iris app was recently GraphQLified, meaning I used the <a href=\"https://github.com/rmosolgo/graphql-ruby\">GraphQL gem</a> and Shopify’s <a href=\"https://github.com/Shopify/graphql-batch\">batching gem</a> to expose a new <code class=\"language-text\">/graphql</code> endpoint on the Rails backend.</p>\n<blockquote>\n<p>By the end of this post I’m going to get tired of typing GraphQL.</p>\n</blockquote>\n<p>Since I had two separate schemas, I had to combine them so both were usable in one go from the <code class=\"language-text\">/graphql</code> endpoint in the Node app.</p>\n<p>So how do we do this?</p>\n<h3>The code</h3>\n<p>I like to start with the full code then break it down. Obviously, this code is pared down to exclude Iris specific stuff.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> buildSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'type-graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> fetch <span class=\"token keyword\">from</span> <span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> print<span class=\"token punctuation\">,</span> DocumentNode<span class=\"token punctuation\">,</span> GraphQLResolveInfo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  introspectSchema<span class=\"token punctuation\">,</span>\n  mergeSchemas<span class=\"token punctuation\">,</span>\n  wrapSchema<span class=\"token punctuation\">,</span>\n  ExecutionResult<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql-tools'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UserResolver <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./resolvers/UserResolver'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Executor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>operation<span class=\"token operator\">:</span> ExecutionParams<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>ExecutionResult<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ExecutionParams</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token operator\">:</span> DocumentNode<span class=\"token punctuation\">;</span>\n  variables<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">;</span>\n  context<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">;</span>\n  info<span class=\"token operator\">?</span><span class=\"token operator\">:</span> GraphQLResolveInfo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> executor<span class=\"token operator\">:</span> <span class=\"token function-variable function\">Executor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> document<span class=\"token punctuation\">,</span> variables <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fetchResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      query<span class=\"token punctuation\">,</span>\n      variables<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> fetchResult<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSchema</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> localSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">buildSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      resolvers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>UserResolver<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      emitSchemaFile<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      dateScalarMode<span class=\"token operator\">:</span> <span class=\"token string\">'isoDate'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> remoteSchema <span class=\"token operator\">=</span> <span class=\"token function\">wrapSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      schema<span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> <span class=\"token function\">introspectSchema</span><span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      executor<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">mergeSchemas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      schemas<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>localSchema<span class=\"token punctuation\">,</span> remoteSchema<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>The explanation</h3>\n<p>Let’s go section by section.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> buildSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'type-graphql'</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>We use <a href=\"https://typegraphql.com/\">TypeGraphQL</a> to create the support app’s schema and resolvers. I won’t go into how it works, but you should definitely check it out.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 1\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> fetch <span class=\"token keyword\">from</span> <span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> print<span class=\"token punctuation\">,</span> DocumentNode<span class=\"token punctuation\">,</span> GraphQLResolveInfo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  introspectSchema<span class=\"token punctuation\">,</span>\n  mergeSchemas<span class=\"token punctuation\">,</span>\n  wrapSchema<span class=\"token punctuation\">,</span>\n  ExecutionResult<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql-tools'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UserResolver <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./resolvers/UserResolver'</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The rest of the imports are <code class=\"language-text\">fetch</code>, the functions and types needed from the <code class=\"language-text\">graphql</code> and <code class=\"language-text\">graphql-tools</code> to merge the schemas, and our <code class=\"language-text\">UserResolver</code> that we made with TypeGraphQL.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 11\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Executor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>operation<span class=\"token operator\">:</span> ExecutionParams<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>ExecutionResult<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ExecutionParams</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token operator\">:</span> DocumentNode<span class=\"token punctuation\">;</span>\n  variables<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">;</span>\n  context<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">;</span>\n  info<span class=\"token operator\">?</span><span class=\"token operator\">:</span> GraphQLResolveInfo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> executor<span class=\"token operator\">:</span> <span class=\"token function-variable function\">Executor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> document<span class=\"token punctuation\">,</span> variables <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fetchResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      query<span class=\"token punctuation\">,</span>\n      variables<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> fetchResult<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Line 11 just defines the type for our <code class=\"language-text\">executor()</code> function parameters, which is why we imported <code class=\"language-text\">DocumentNode</code>, and <code class=\"language-text\">GraphQLResolveInfo</code>. Line 18 defines <code class=\"language-text\">executor()</code> function that actually fetches GraphQL results from the URL defined in our <code class=\"language-text\">.env</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 35\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSchema</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> localSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">buildSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      resolvers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>UserResolver<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      emitSchemaFile<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      dateScalarMode<span class=\"token operator\">:</span> <span class=\"token string\">'isoDate'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> remoteSchema <span class=\"token operator\">=</span> <span class=\"token function\">wrapSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      schema<span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> <span class=\"token function\">introspectSchema</span><span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      executor<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">mergeSchemas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      schemas<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>localSchema<span class=\"token punctuation\">,</span> remoteSchema<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Line 38 builds the local schema with TypeGraphQL, while line 44 introspects the remote schema and uses the <code class=\"language-text\">executor()</code> function from above to parse the results. Finally, <code class=\"language-text\">wrapSchema()</code> is called to avoid type and naming collisions between the two schemas.</p>\n<p>Line 49 combines both schemas, which makes it possible to send something like</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">users</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span>\n    <span class=\"token property\">name</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token object\">studios</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token object\">clients</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">email</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>to the <em>one</em> GraphQL endpoint using both executable schemas to get data back from both data sources. (<code class=\"language-text\">users</code> belongs to the local schema and <code class=\"language-text\">studios</code> belongs to the remote schema.)</p>\n<p>It makes me feel super smart, but it’s really just GraphQL doing all the heavy lifting.</p>","frontmatter":{"title":"GraphQL and Schema Stitching","date":"August 23, 2020","description":"We recently built a support app that combines two GraphQL schemas. This is just a guide for how to make it work in Typescript.","subtitle":null,"tags":["Code"]}}},"pageContext":{"slug":"/graphql-fun/","previous":{"fields":{"slug":"/sobriety/"},"frontmatter":{"title":"Sobriety","subtitle":null}},"next":{"fields":{"slug":"/guard-in-docker/"},"frontmatter":{"title":"How to set up Guard in Docker","subtitle":null}}}},
    "staticQueryHashes": ["3000541721","731186232"]}