{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/kubernetes-tips/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Cal Perez"}},"markdownRemark":{"id":"56a4dcad-3657-51d7-be1c-a692515b7a36","excerpt":"Kubernetes (or k8s as I‚Äôll refer to it from now on) was extremely intimidating when I first started at Iris. I was coming from a software engineering background‚Ä¶","timeToRead":4,"html":"<p>Kubernetes (or k8s as I‚Äôll refer to it from now on) was extremely intimidating when I first started at Iris. I was coming from a software engineering background that had nothing to do with DevOps of any kind, so that was understandable. DevOps felt like the realm of those Linux and networking wizards who look very much unlike me and wield shell scripts as easily as I can write HTML.</p>\n<p>In retrospect, I was definitely being dramatic about it, but imposter syndrome is hard to extricate yourself from when you‚Äôre new <em>and</em> you‚Äôre learning something new. Also, I wasn‚Äôt learning something new with the buffer of a team. I <em>had</em> to learn this because I was the only person on the Dev team.</p>\n<p>Now, 15 months later, I feel incredibly comfortable with k8s. There‚Äôs definitely still stuff for me to learn, of course, but it‚Äôs not soul crushingly stymying anymore.</p>\n<h2>A quick aside</h2>\n<p>When I was first learning, I watched <a href=\"https://www.youtube.com/watch?v=PH-2FfFD2PU\">this video</a> because, you know, five minutes was all it was going to take.</p>\n<p>I still have yet to create my own copy of this diagram and fill in the more complicated bits that Steve Tegeler briefly mentions. When I do, I‚Äôll definitely post about it.</p>\n<p>The video definitely demystified how everything worked, though. It‚Äôs just images on machines that are orchestrated by a series of processes and APIs that run on a master machine. I have no idea how, but that‚Äôs not the point of the video.</p>\n<h2>Configuration adjustments</h2>\n<p>We have a lot of YAML files, settings for each environment we deploy, including QA, Demo, Staging, and Production. I had also inherited the files, but the myriad different settings intimidated me most. I understand that the purpose of the YAML is a declaration of state. Basically, ‚ÄúI want this Docker image, with these environment variables, in this namespace running in my cluster.‚Äù You don‚Äôt care how k8s does it, you just trust that it does.</p>\n<p>But how could I make our deployments more efficient and not ‚Äújust work‚Äù?</p>\n<p>Instead of studying all of the possible configurations, I started with the problem I had at hand: production would randomly spike in CPU usage then go down (üéâYay!üéâ). I like to think that it was because we have more users and this is just the next problem to solve at a scaling company. Right?</p>\n<p>Anyway, I noticed in AWS that CPU usage for one k8s node was the only one spiking.</p>\n<p><img src=\"https://s3.us-east-2.amazonaws.com/caryssa-perez-images/posts/y.jpg\" alt=\"y tho\"></p>\n<p>I dug into it and noticed that most of our pods were running in this node. By default, the k8s scheduler decides where pods should run based on the resources available. However, production was using most of the node‚Äôs resources. I needed to spread it out across the other three m4.larges(!) we have in the cluster.</p>\n<p>We weren‚Äôt using the <em>replica</em> setting at all. I upped only production to four because we have four worker nodes and the other environments will never get as much traffic. Just in case, I put in some CPU and memory limits under the <em>resources</em> setting.</p>\n<blockquote>\n<p>The limits are subject to change since I honestly just picked random numbers until it looked ok in AWS.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Truncated because it's a secret!</span>\n\n <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 2.5G\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 500m\n            <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 2.5G\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 500m</code></pre></div>\n<h2>Helpful commands</h2>\n<p>Here‚Äôs the obvious commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># List all the pods in a particular namespace.</span>\nkubectl get pods -n NAMESPACE\n\n<span class=\"token comment\"># Show details about a particular pod.</span>\nkubectl describe pod POD_NAME\n\n<span class=\"token comment\"># List the actual machines the cluster is running on.</span>\nkubectl get nodes\n\n<span class=\"token comment\"># Show details about a particular node.</span>\nkubectl describe <span class=\"token function\">node</span> NODE\n\n<span class=\"token comment\"># Startup the proxy server to see that lovely GUI.</span>\nkubectl proxy\n\n<span class=\"token comment\"># Run a command in a pod.</span>\nkubectl -it <span class=\"token builtin class-name\">exec</span> -n NAMESPACE -- CMD</code></pre></div>\n<p>And more on the k8s site with <a href=\"https://kubernetes.io/docs/reference/kubectl/cheatsheet/\">their handy dandy cheatsheet</a>.</p>\n<p>The most helpful thing I made was a function in my <code class=\"language-text\">.zshrc</code> to save those precious seconds running a command in a pod.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Add this to .bashrc or .zshrc.</span>\n<span class=\"token comment\"># (I added the slashes for readability.)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">k8s_exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  kubectl -it <span class=\"token builtin class-name\">exec</span> -n <span class=\"token variable\">$1</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl get pods -n $1 <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -oh -m <span class=\"token number\">1</span> <span class=\"token string\">\"web-\\w*-\\w*\"</span><span class=\"token variable\">)</span></span> <span class=\"token punctuation\">\\</span>\n  -- <span class=\"token variable\">${@<span class=\"token operator\">:</span>2}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">k8sweb</span><span class=\"token operator\">=</span><span class=\"token string\">'k8s_exec'</span></code></pre></div>\n<p>Let me break this down:</p>\n<ul>\n<li><code class=\"language-text\">kubectl -it exec</code>, open a shell</li>\n<li><code class=\"language-text\">-n $1</code>, in the specified namespace using the first argument</li>\n<li><code class=\"language-text\">kubectl get pods -n $1</code>, get pods in the same namespace which is piped into <em>grep</em></li>\n<li><code class=\"language-text\">grep -oh -m 1 \"web-\\w*-\\w*\"</code>, which finds the first match of the name that includes ‚Äúweb‚Äù</li>\n<li><code class=\"language-text\">-- ${@:2}</code>, then runs the command in the pod that <em>grep</em> found with the remaining arguments after the first one</li>\n</ul>\n<p>You‚Äôd run it like</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">k8sweb qa rails c</code></pre></div>\n<p>if you wanted to open a Rails console in the ‚Äúweb‚Äù pod in QA. This is definitely unique to our setup. Your pod name could be ‚Äúwalrus‚Äù or something, so tweak it as needed.</p>","frontmatter":{"title":"Some Kubernetes tips I've learned","date":"August 09, 2020","description":"I had to learn Kubernetes on the job when I first started at Iris. Here's some things that helped me along the way.","subtitle":null,"tags":["Code"]}}},"pageContext":{"slug":"/kubernetes-tips/","previous":{"fields":{"slug":"/amperes-law/"},"frontmatter":{"title":"Maxwell's Equations","subtitle":"Ampere's Law"}},"next":{"fields":{"slug":"/sobriety/"},"frontmatter":{"title":"Sobriety","subtitle":null}}}},
    "staticQueryHashes": ["3000541721"]}