{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/guard-in-docker/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Cal Perez"}},"markdownRemark":{"id":"d9450b90-6f4d-521a-9e73-8a1c454678ac","excerpt":"My new place uses the same stack as my last place (React + Rails on Docker). However, when I started we didn’t have a configured testing environment (or a test…","timeToRead":2,"html":"<p>My new place uses the same stack as my last place (React + Rails on Docker). However, when I started we didn’t have a configured testing environment (or a test suite) to isolate our tests in. I like to use <a href=\"https://github.com/guard/guard\">Guard</a> with <a href=\"https://github.com/rspec/rspec\">RSpec</a> to keep RSpec “warm”. It’s also super helpful when doing TDD so you can just keep running your specs over and over.</p>\n<p>I’m assuming you already have a Guardfile and Dockerfile. In case you don’t have a Dockerfile, here’s a simple one that leverages MySQL.</p>\n<blockquote>\n<p><a href=\"https://lipanski.com/posts/dockerfile-ruby-best-practices\">This is my favorite best practice guide</a> for creating a Dockerfile.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Pick your version of Ruby.</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ruby:2.7.2</span>\n\n<span class=\"token comment\"># Update the package lists before installing.</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update -qq</span>\n\n<span class=\"token comment\"># This installs</span>\n<span class=\"token comment\"># * build-essential because Nokogiri requires gcc</span>\n<span class=\"token comment\"># * common CA certs</span>\n<span class=\"token comment\"># * the mysql CLI and client library</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get install -y <span class=\"token operator\">\\</span>\n  build-essential <span class=\"token operator\">\\</span>\n  ca-certificates <span class=\"token operator\">\\</span>\n  default-libmysqlclient-dev</span>\n\n<span class=\"token comment\"># Install your version of Node.</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> curl -sL https://deb.nodesource.com/setup_14.x | bash - <span class=\"token operator\">\\</span>\n  &amp;&amp; apt-get install -y nodejs</span>\n\n<span class=\"token comment\"># Create working directory</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> APP_HOME /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> mkdir <span class=\"token variable\">${APP_HOME}</span></span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> <span class=\"token variable\">${APP_HOME}</span></span>\n\n<span class=\"token comment\"># Copy the Gemfile</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> Gemfile <span class=\"token variable\">${APP_HOME}</span>/Gemfile</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> Gemfile.lock <span class=\"token variable\">${APP_HOME}</span>/Gemfile.lock</span>\n\n<span class=\"token comment\"># Make sure we are running bundler version 2.0</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> gem install bundler -v 2.1.4</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> bundle install</span>\n\n<span class=\"token comment\"># Copy the project over</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . <span class=\"token variable\">${APP_HOME}</span></span>\n\n<span class=\"token comment\"># Run guard</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"bundle\"</span>, <span class=\"token string\">\"exec\"</span>, <span class=\"token string\">\"guard\"</span>, <span class=\"token string\">\"--no-bundler-warning\"</span>, <span class=\"token string\">\"--no-interactions\"</span>]</span></code></pre></div>\n<p>Then create a new <code class=\"language-text\">docker-compose.test.yml</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span> .env\n\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'redis:5-alpine'</span>\n\n  <span class=\"token key atrule\">guard</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">tty</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">stdin_open</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> db\n      <span class=\"token punctuation\">-</span> redis\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> Dockerfile.test\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span> .env\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'.:/app'</span></code></pre></div>\n<p>So as is, we can run <code class=\"language-text\">docker compose -f docker-compose.test.yml --build up</code> and Guard will start up. You can then edit and save one of your specs to execute it.</p>\n<p>But what if you want to use the <code class=\"language-text\">pry</code> gem and stop execution of your tests?</p>\n<p>This part of the Docker Compose file is key:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">tty</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">stdin_open</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>These keys map to the <code class=\"language-text\">-t</code> and <code class=\"language-text\">-i</code> flags, respectively, when running <code class=\"language-text\">docker run exec -it CONTAINER_NAME</code>. This command opens a pseudo terminal that connects your machine’s terminal (iTerm, Terminal, CommandPrompt) to the <code class=\"language-text\">stdin</code>/<code class=\"language-text\">stdout</code> stream of the container. It lets you “login” to the container to run commands and view the output of said commands, basically.</p>\n<p>Tying this back to spec execution, you could then attach yourself to the Docker container running guard using <code class=\"language-text\">docker attach CONTAINER_ID</code> and you’d see a REPL session from <code class=\"language-text\">pry</code> wherever you added <code class=\"language-text\">binding.pry</code> in your spec.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">describe <span class=\"token string-literal\"><span class=\"token string\">\"validations\"</span></span> <span class=\"token keyword\">do</span>\n  it <span class=\"token string-literal\"><span class=\"token string\">'is valid with valid attributes'</span></span> <span class=\"token keyword\">do</span>\n    binding<span class=\"token punctuation\">.</span>pry <span class=\"token comment\"># &lt;---- Here</span>\n    expect<span class=\"token punctuation\">(</span>build<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to be_valid\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Running this spec will stop execution at the <code class=\"language-text\">binding.pry</code> where you can then attach to the container and see the REPL session so you can test what <code class=\"language-text\">build(:user)</code> yields and other variables or logic in your spec.</p>\n<blockquote>\n<p>A quick way to attach to a container in one line is <code class=\"language-text\">docker attach $(docker ps -aqf \"ancestor=CONTAINER_NAME | head -n 1)</code>.</p>\n</blockquote>\n<p>Happy testing!</p>","frontmatter":{"title":"How to set up Guard in Docker","date":"May 30, 2021","description":"For when you want to run your test environment completely separate.","subtitle":null,"tags":["Code"]}}},"pageContext":{"slug":"/guard-in-docker/","previous":{"fields":{"slug":"/graphql-fun/"},"frontmatter":{"title":"GraphQL and Schema Stitching","subtitle":null}},"next":{"fields":{"slug":"/electrical-components/"},"frontmatter":{"title":"Electrical Components: Resistor","subtitle":null}}}},
    "staticQueryHashes": ["3000541721"]}